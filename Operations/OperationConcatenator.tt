<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
	var className ="OperationConcatenator";
	var numOfGenericParameters = 15; 
	var dependencyGenericName = "T";
	var dependencyParameterName = "operation";
	var resultParameterName = "result";
	var concatenationMethodName = "And";
	var transformationMethodName = "Select";
#>
using System;
using System.Linq;
using System.Threading.Tasks;
using System.Reactive.Linq;

namespace Operations
{
<# foreach (var i in Enumerable.Range(2, numOfGenericParameters)) { 
	var generics = string.Join(", ",Enumerable.Range(1, i).Select(x => dependencyGenericName + x));
	var nextGeneric = dependencyGenericName + (i + 1);
	var arguments = string.Join(", ",Enumerable.Range(1, i).Select(x => dependencyParameterName + x));
	var returnGenerics = string.Join(", ",Enumerable.Range(1, i).Select(x => $"{dependencyGenericName}{x}"));
	var returnArguments = string.Join(", ",Enumerable.Range(1, i).Select(x => $"{dependencyGenericName}{x} {resultParameterName}{x}"));
	var returnParameters = string.Join(", ",Enumerable.Range(1, i).Select(x => $"{resultParameterName}{x}"));
	var ctorarguments = string.Join(", ",Enumerable.Range(1, i).Select(x => $"IOperation<{dependencyGenericName}{x}> {dependencyParameterName}{x}"));
#>	public sealed class <#= className #><<#= generics #>>
    {
<# foreach (var j in Enumerable.Range(1, i)) { #>
        private readonly IOperation<<#= dependencyGenericName + j #>> <#= dependencyParameterName#><#= j #>;
<# } #>

        internal <#= className #>(<#= ctorarguments #>)
        {
<# foreach (var j in Enumerable.Range(1, i)) { #>
        this.<#= dependencyParameterName + j #> = <#= dependencyParameterName + j #>;
<# } #>
        }

		public IOperation<T> <#= transformationMethodName#><T>(Func<<#= generics #>, T> selector)
		{
			return 
				new Operation<T>(Observable.When(
				<#= dependencyParameterName #>1.AsObservable().And(
<# foreach (var j in Enumerable.Range(2, i - 2)) { #>			
				<#= dependencyParameterName + j #>.AsObservable()).And(
<# } #>
				<#= dependencyParameterName + i #>.AsObservable())
				.Then((<#= returnArguments #>) => selector(<#= returnParameters #>))))
			;
		}

		public IOperation<(<#= returnGenerics #>)> <#= transformationMethodName#>Tuple<T>()
		{
			return 
				new Operation<(<#= returnGenerics #>)>(Observable.When(
				<#= dependencyParameterName #>1.AsObservable().And(
<# foreach (var j in Enumerable.Range(2, i - 2)) { #>			
				<#= dependencyParameterName + j #>.AsObservable()).And(
<# } #>
				<#= dependencyParameterName + i #>.AsObservable())
				.Then((<#= returnArguments #>) => (<#= returnParameters #>))))
			;
		}

<# if (i < numOfGenericParameters) { #>
        public <#= className #><<#= generics #>, <#= nextGeneric #>> <#= concatenationMethodName#><<#= nextGeneric #>>(IOperation<<#= nextGeneric #>> next)
        {
            return new <#= className #><<#= generics #>, <#= nextGeneric #>>(<#= arguments #>, next);
        }

		public <#= className #><<#= generics #>, <#= nextGeneric #>> <#= concatenationMethodName#><<#= nextGeneric #>>(Func<<#= nextGeneric #>> next)
        {
            return <#= concatenationMethodName#>(Operation.Create(next));
        }

		public <#= className #><<#= generics #>, <#= nextGeneric #>> <#= concatenationMethodName#><<#= nextGeneric #>>(Func<Task<<#= nextGeneric #>>> next)
        {
            return <#= concatenationMethodName#>(Operation.Create(next));
        }
<# } #>
    }
<# } #>
}
